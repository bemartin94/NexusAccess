from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '8431c2b9fbe1'
down_revision: Union[str, None] = 'ee55803053ab'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

# alembic/versions/8431c2b9fbe1_add_role_id_to_users_table_and_update_.py

# ... (imports y revision metadata) ...

def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # Drop the old many-to-many table first, outside of batch mode
    op.drop_table('user_roles') # 

    # --- Start batch mode for 'roles' table ---
    with op.batch_alter_table('roles', schema=None) as batch_op:
        batch_op.drop_index('ix_roles_id') 
        batch_op.create_unique_constraint('uq_roles_name', ['name']) # <-- ESTA LÍNEA DEBE ESTAR AQUÍ
    # --- End batch mode for 'roles' table ---

    # --- Start batch mode for 'users' table ---
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('role_id', sa.Integer(), nullable=True))
        batch_op.create_foreign_key('fk_users_role_id', 'roles', ['role_id'], ['id']) 
    # --- End batch mode for 'users' table ---

    # --- Start batch mode for 'visitors' table ---
    with op.batch_alter_table('visitors', schema=None) as batch_op:
        batch_op.alter_column('id_card',
                       existing_type=sa.VARCHAR(),
                       type_=sa.Integer(),
                       existing_nullable=True)
    # --- End batch mode for 'visitors' table ---
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # --- Start batch mode for 'visitors' table (reversing upgrade) ---
    with op.batch_alter_table('visitors', schema=None) as batch_op:
        batch_op.alter_column('id_card',
                       existing_type=sa.Integer(),
                       type_=sa.VARCHAR(),
                       existing_nullable=True)
    # --- End batch mode for 'visitors' table ---

    # --- Start batch mode for 'users' table (reversing upgrade) ---
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_constraint('fk_users_role_id', type_='foreignkey') 
        batch_op.drop_column('role_id')
    # --- End batch mode for 'users' table ---

    # --- Start batch mode for 'roles' table (reversing upgrade) ---
    with op.batch_alter_table('roles', schema=None) as batch_op:
        batch_op.drop_constraint('uq_roles_name', type_='unique') 
        batch_op.create_index('ix_roles_id', ['id'], unique=False)
    # --- End batch mode for 'roles' table ---

    # Recreate the user_roles table (outside of batch mode)
    op.create_table('user_roles',
    sa.Column('user_id', sa.INTEGER(), nullable=False),
    sa.Column('role_id', sa.INTEGER(), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'role_id')
    )
    # ### end Alembic commands ###